Display the board:
On every frame, display each square in alternating dark and light colors.
Alternate colors on each square, until you get to the next row, which you will then use the same color as the last color from the previous row.
So, once the iteration-1 is equal to the number of collums, make sure to set the next color to the current color, rather than the other color.
All the squares will be added to an array with their proper coordinates and colors, this will all be done upon initialization, to save resources.
Each square will be given it's coordinate in reference to the board - essentially, a squares coord to be blitted at will be its x, y + board x, y


What will every piece be able to do?
-Every piece can move
-Every piece can be captured
-Every piece will have a texture
-No piece can move if that same move would put the king in check
-No piece can move if the king is already in check and that same move does not take the king out of check
-Have an x, y pair relating to the square it is in
-Have a 1:1 ratio width and height for ease of scaling to differing squares sizes (a square also has a 1:1 width and height ratio)

What can a pawn do?
-Move forward 2 spaces if it hasn't already moved once
-Move forward 1 space
-Capture 1 space diagonally up left and up right
-Turn into any piece other than the king if it reaches the the last rank

What can a knight do?
-Move + capture 2 spaces then 1 adjacent space in all cardinal directions

What can a bishop do?
-Move + capture diagonally in all directions spanning the entire board

What can a rook do?
-Move + capture in all cardinal directions

What can a queen do?
-Move + capture in all cardinal directions and diagonals

What can a king do?
-Move + capture 1 space in all adjacent tiles, unless that same move would put the king in check



Move the piece:
-Get clicked square
-If there is a self.selected, then set the clicked square to self.selected and then set the self.selected original location in self.squares["piece"] to None


Create server for connection of 2 devices to 1 game:
In the server, data on the current match will only be stored temporarily - the server will simply mediate the changes in board state between both devices.
When one device makes a move, it will send that data to the server. Once the server gets the move from that user, it will send that move to the other user.
The devices will communicate to the server with json data.
When initially connecting to the server, the player can choose an opponent by username, the server will then wait for that opponent to choose the challenger as their opponent. Once they have both challenged each other, they will be connected and in the same match.

spawn a thread from main which will communicate with the server periodically, checking for a new move.
each move stored in the server will be given a number. This number will start at 1 signalling the first move and increment by 1 for each new move that is added to the server. this way, client can know whether or not that is a new move. 

write the class for the client so that the connection can be accessed as a class variable. 
then spawn the thread which will periodically check with the server if there is a new move. 
Whenever the user tries to move you can also send relevent move data through the server by calling a client class function

Establish a connection between both users and handshake.

server recieve connection cant differentiate between multiple json requests sent at the same time. need a way to split the packet by delimeter and then cache away
the rest to be able to use on the next request. I dont even fucking know that might not even be the problem

No it was not the problem. The real problem was that I am sending 2 back to back sendall calls to my server without waiting for a reply.
My next step is to fix my send calls client side to wait for a response back from my server, maybe with use of status codes since then
I can use 100 for error and 200 for successfull call. Also I need a lsit to keep track of client connections server side so that when
I hit the kill switch, my server will automatically close both the listening socket and all subsequent connections. This might fix the
problem where the server must be fully restarted before running again, after killing it. 
